/**
 * shut down the strict mode to access full
 * function of meta programming
 */

//'use strict';

// generated by marionette scaffold
var express = require('express');
var http = require('http');
var path = require('path');
var async = require('async');
var hbs = require('hbs');
var socketIO = require('socket.io');

// add from express@4.8.0 scaffold
var favicon = require('serve-favicon');

// use log4js instead of morgan
// var logger = require('morgan');
var log = require('./lib/util/log');
var logger = log.getLogger(__filename);

var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

// load config
var config = require('./config');
// generate local variables dynamically
for (var key in config) {
  eval("var " + key + " = '" + config[key] + "'");
}

// create a new mongodbUtil
var MongodbUtil = require('./lib/util/mongodbUtil');
var mongodbUtil = MongodbUtil.create(mongodburl, username, password);

/**
 * Ensure establishing mongodb connection pool correctly before
 * starting express application
 */
mongodbUtil.establishConnPool(function(err, result) {
  if (err) {
    logger.error(err);
    return;
  }

  // create and export an express application
  module.exports = app = express();

  // put config into app
  app.set('yuanhe_config', config);

  // put mongodb connection pool into app
  app.set('db', result.db);
  app.set('dbProxy', result.dbProxy);

  //result.dbProxy.collection('test_insert', function(err, collection) {
    //if (err) {
      //return;
    //}
    //collection.count(function(err, count) {
      //if (err) {
        //return;
      //}
    //});
  //});

  // set the view engine
  app.set('view engine', 'hbs');
  // where to find the view files
  app.set('views', __dirname + '/views');

  // uncomment after placing your favicon in /public
  // app.use(favicon(__dirname + '/public/favicon.ico'));

  // using dev logger as the very first middleware
  //app.use(logger('dev'));

  //
  /**
   * Parse application/x-www-form-urlencoded, getting parsed and
   * raw body simultaneously.
   */
  app.use(bodyParser.urlencoded({
    extended: false,
    verify: function(req, res, buf, encoding) {
      req.rawBody = buf.toString();
    }
  }));

  // parse application/json
  app.use(bodyParser.json());

  // parse cookie header
  app.use(cookieParser());

  // mark the app dir as a static dir
  app.use(express.static(path.join(__dirname, '../app')));

  // use log4js middleware
  app.use(log.getLib().connectLogger(logger, {
    level: 'auto',
    format: ':method :url'
  }));

  // pass the express instance to the routes module
  var routes = require('./routes')(app);

  // 404 error handler
  app.use(function(req, res, next) {
    logger.warn('not page found in server side');
    res.status(404);
    res.render('404', {
      url: req.url
    });
  });

  // 500 error handler
  app.use(function(error, req, res, next) {
    logger.error(error);
    res.status(500);
    res.render('500', {
      err: error
    });
  });

  // start listening on port given in config file
  http.createServer(app).listen(port, function() {
    logger.info('app has started, listening on port ' + port);
  });
});
